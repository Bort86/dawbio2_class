labColNames<- labColNames() # name of the columns
expDataName = expSet[row.names(ranked),]
d3heatmap(expDataName[1:input$sli_heatmap,], labCol = labColNames, cexRow=0.5,
k_row=3, k_col=3)
})
#### Volcano plot ####
# reactive function whihch create a volcano plot
output$plot.volcano <- renderPlot({
req(ranked())
t<-ranked()
EnhancedVolcano(t,
title = paste0("Fold changes for this contrast group: ", input$top_coef),
subtitle = "",
lab = rownames(t),
x = 'logFC',
y = 'P.Value',
xlab = "Fold Change",
ylab = "Significance",
legendPosition = 'right',
transcriptLabSize = 4)
})
### Plot individual gene expression ####
output$plot.gene1 <- renderPlotly({
req(facLevel())
gene <- input$searchGene
matriz <- switch(input$radioGene,
"Raw"= eSetRaw(),
"Normalized"= eSetRma(),
eSetRma())
gmap <- switch(input$radioGene,
"Raw"= genes.raw(),
"Normalized"= genes.rma(),
genes.raw())
y<- exprs(matriz)
group <- facLevel()
if(gene=="" | !gene %in% gmap$gen){
dt<- gmap[1,]
} else {
dt<-gmap %>%
filter(gen==gene)
}
ggplot(dt, aes(x=group, y=value)) + geom_jitter(aes(colour=group)) +
theme(legend.position = "none")
})
}
# launch shiny app
shinyApp(ui, server)
runApp()
runApp()
runApp()
?gen
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
# Create a conditional panel which olny show his content
# when sidebar menu id is equal whith menu item id
conditionalPanel(
## PANEL HOME
# show information about NVBI Geo objects
condition = "input.sidebar == 'home'",
# Create a body tab panel
tabsetPanel(
type = "tabs",
# Create tab and add a title
tabPanel("NCBI Geo",
fluidRow(
box(width = 12,
h1("Overview of GEO"),
p("The NCBI Gene Expression Omnibus (GEO) serves as a public repository
for a wide range of high-throughput experimental data. These data include
single and dual channel microarray-based experiments measuring mRNA,
genomic DNA, and protein abundance, as well as non-array techniques
such as serial analysis of gene expression (SAGE), mass spectrometry
proteomic data, and high-throughput sequencing data.
At the most basic level of organization of GEO, there are four basic entity types.
The first three (Sample, Platform, and Series) are supplied by users; the fourth,
the dataset, is compiled and curated by GEO staff from the user-submitted data.
See the",
a("GEO home page", href="https://www.ncbi.nlm.nih.gov/geo/"),
"for more information.")
),
box(
width = 12,
h2("Platforms"),
p("A Platform record describes the list of elements on the array
(e.g., cDNAs, oligonucleotide probesets, ORFs, antibodies)
or the list of elements that may be detected and quantified in that experiment
(e.g., SAGE tags, peptides). Each Platform record is assigned a unique and stable
GEO accession number (GPLxxx). A Platform may reference many Samples that have been
submitted by multiple submitters.")
),
box(
width = 12,
h2("Samples"),
p("A Sample record describes the conditions under which an individual Sample was
handled, the manipulations it underwent, and the abundance measurement of each
element derived from it. Each Sample record is assigned a unique and stable GEO
accession number (GSMxxx). A Sample entity must reference only one Platform and
may be included in multiple Series.")
),
box(
width = 12,
h2("Series"),
p("A Series record defines a set of related Samples considered to be part of a group,
how the Samples are related, and if and how they are ordered. A Series provides a
focal point and description of the experiment as a whole. Series records may also
contain tables describing extracted data, summary conclusions, or analyses.
Each Series record is assigned a unique and stable GEO accession number (GSExxx).
Series records are available in a couple of formats which are handled by GEOquery
independently. The smaller and new GSEMatrix files are quite fast to parse; a simple
flag is used by GEOquery to choose to use GSEMatrix files (see below).")
),
box(
width = 12,
h2("Datasets"),
p("GEO DataSets (GDSxxx) are curated sets of GEO Sample data. A GDS record represents
a collection of biologically and statistically comparable GEO Samples and forms the
basis of GEO's suite of data display and analysis tools. Samples within a GDS refer
to the same Platform, that is, they share a common set of probe elements. Value
measurements for each Sample within a GDS are assumed to be calculated in an
equivalent manner, that is, considerations such as background processing and
normalization are consistent across the dataset. Information reflecting experimental
design is provided through GDS subsets.")
)
)
),
tabPanel(
"Micro arrays",
fluidRow(
box(
width = 12,
h1("To Do"),
a("Micro arrays en espanyol",
href="https://www.cabimer.es/web3/unidades-apoyo/genomica/microarrays-de-affymetrix/")
)
)
),
tabPanel(
"Main",
fluidRow(
box(
width = 12,
h1("Introduction"),
p("GDS analysis is an online app to perform analysis to a differential expression genes
microarrays experiment, currently the app only analise data from NCBI GEO Homo sapiens,
int the future we will add more types of arrays and organism."),
p("This app uses the Empirical Bayes Method from Limma (Linear Models for Microarray Data),
R package to calculate the expression of the genes"),
p("You can download all de data from",
a("NCBI GEO", href="https://www.ncbi.nlm.nih.gov/geo/"),
"for further analysis"),
h1("How to use it?"),
p("This section provides a short guide to run the GDS analysis"),
h2("Data input selection")
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
Rscipt("./Packages.R")
install.packages("shinydashboard")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
uiOutput("selectPhenoData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sidebarMenu(id="sidebar",
style = "position: fixed;",
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Data input", tabName = "queries", icon = icon("keyboard")),
menuItem("Plot", tabName = "plot", icon = icon("chart-bar")),
menuItem("Data", tabName = "data", icon = icon("table")),
uiChangeThemeDropdown()
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- getGEO("gds858")
MAplot(data)
matriz <- GDS2MA(data)
matriz
class(matriz)
matriz <- GDS2eSet(data)
matriz
matriz <- GDS2eSet(data, do.log=TRUE)
y <- exprs(matriz)
y
plotMA(matriz, 1)
limma:plotMA(matriz, 1)
library(limma)
limma:plotMA(matriz, 1)
limma::plotMA(matriz, 1)
limma::plotMA(y)
, 1
limma::plotMA(y, 1)
limma::plotMA(matriz, 2)
install.packages("ggpubr")
library(ggpubr)
ggmaplot(matriz)
ggmaplot(y)
data("diff_express")
data(diff_express)
ggmaplot(diff_express)
ggmaplot(diff_express, main = expression("Group 1" %->% "Group 2"),
fdr = 0.05, fc = 2, size = 0.4,
palette = c("#B31B21", "#1465AC", "darkgray"),
genenames = as.vector(diff_express$name),
legend = "top", top = 20,
font.label = c("bold", 11),
font.legend = "bold",
font.main = "bold",
ggtheme = ggplot2::theme_minimal())
diff_express
View(data)
View(diff_express)
View(diff_express)
detach("package:ggpubr", unload = TRUE)
pData(matriz)
groups <- pData(matriz)[,2]
groups<- make.names(groups)
vect <- unique(groups)
fac <- factor(groups,levels=vect)
design <- model.matrix(~ 0 + fac)
design
colnames(design) <- vect
df <- lmFit(y,design)
df
ebayes <- eBayes(df)
ebayes
t <- topTable(ebayes, coef=1, adjust.method = "fdr")
t
library(ggpubr)
ggmaplot(t)
colnames(t)
colnames(t)[1]
colnames(t)[1] <- "log2FoldChange"
colnames(t)
colnames(t)[4] <- "padj"
colnames(t)[2] <- "baseMean"
ggmaplot(t)
ggmaplot(t, fdr=0.05, fc=2)
?limma::plotMA
t
df
ggmaplot(df)
library(oligo)
plotWithHighlights(df)
class(df)
plotWithHighlights(df)
limma::plotWithHighlights(df)
plot.MArrayLM(df)
limma::plot.MArrayLM(df)
plotWithHighlights(df)
plotWithHighlights(df,df)
plotWithHighlights(t)
plotWithHighlights(ebayes)
plotMA(matriz, 2)
plotMA(df)
plotMA(t)
?plotMA
plotMA(matriz)
plotMA(y)
plotMA(matriz)
plotMA(data)
plotMA(df)
plotMA(ebayes)
plotMA(df)
limma::plotMA(df)
limma::plotMA(df, 1)
limma::plotMA(df, 2)
limma::
limma::plotMA(matriz, 2)
limma::plotMA(matriz, 1)
limma::plotMA(matriz, 3)
runApp()
limma::plotMA(matriz, 2)
limma::plotMA(matriz, "GSM14499")
2
limma::plotMA(matriz, 2)
limma::plotMA(matriz, GSM14499)
limma::plotMA(matriz, "GSM14499")
limma::plotMA(matriz, 2)
sampleNames(matriz)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
co <- match(sampleNames(y), "GSM14499")
limma::plotMA(matriz, co)
co <- match(sampleNames(y), "GSM14492")
limma::plotMA(matriz, co)
co <- match(sampleNames(y), "GSM14499")
limma::plotMA(matriz, co)
co <- match(sampleNames(matriz), "GSM14499")
limma::plotMA(matriz, co)
limma::plotMA(matriz, !!!ensym(co))
co
samplenames <- sampleNames(matriz)
samplenames
list_names <- list()
for (i in length(samplenames)){
list_names[samplenames[i]]<-i
}
list_names
samplenames <- sampleNames(matriz)
list_names <- list()
for (i in 1:length(samplenames)){
list_names[samplenames[i]]<-i
}
list_names
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp('~/Escritorio')
runApp('~/Escritorio')
runApp()
geo <- getGEO("gds858", destdir=".")
e <- GDS2eSet(geo, do.log2=TRUE)
summary(e)
summarise(e)
pData(e)
Meta(e)
e@Meta
eSMeta
e$Meta
pm(e)
e@phenoData
e@experimentData
e@annotation
e <- GDS2eSet(geo, do.log2=TRUE, AnnotGPL = TRUE)
e@annotation
e@protocolData
e@featureData
e@assayData
e@phenoData
e@experimentData
eData(e)
fData(e)
view(fData(e))
library(tidyverse)
view(fData(e))
e@experimentData
write.table(e@experimentData)
write.table(as.data.frame(e@experimentData))
e@experimentData
e@experimentData
print.data.table(e)
print.data.frame(e)
pData(e)
e@phenoData
print(e)
e@experimentData
fData(e)
view(fData(e))
runApp()
runApp()
fData(e)
data <- as.data.frame(fData(e))
data
fData(e)$ID
fData(e)$"Gene ID"
class(fData(e))
data <- fData(e) %>%
select(ID, Gene symbol, Nucleotide Title, GO:Function, GO:Process)
data <- fData(e) %>%
select(ID, "Gene symbol", "Nucleotide Title", "GO:Function", "GO:Process")
data
view(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
